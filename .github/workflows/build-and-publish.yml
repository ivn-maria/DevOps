name: Build and Publish Docker Image with Code Scans and Checks on push

on:
  push:
    branches:
      - main

jobs:
  StyleAndLintCheck:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install flake8
        run: pip install flake8

      - name: Style & lint check
        run: flake8

  editorconfigCheck:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install editorconfig-checker
        run: npm install -g editorconfig-checker

      - name: .editorconfig check
        run: editorconfig-checker

  MakrdownFilesCheck:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Markdown files check
        run: markdownlint '**/*.md'

  UnitTests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install -r src/requirements.txt
          pip install flask-wtf

      - name: Unit tests run
        run: python3 -m unittest src/app_test.py

  HardcodedSecretsCheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Hardcoded secrets check
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DatabaseMigrationsCheck:
    runs-on: ubuntu-latest
    needs: ["StyleAndLintCheck", "editorconfigCheck", "MakrdownFilesCheck", "UnitTests", "HardcodedSecretsCheck"]

    services:
      mysql:
        image: mysql:8.1
        env:
          MYSQL_ROOT_PASSWORD: 123456
          MYSQL_USER: flyway
          MYSQL_PASSWORD: 123456
          MYSQL_DATABASE: example
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Docker image
        run: docker pull redgate/flyway

      - name: Database Migration Check
        run: |
          docker run --rm \
          --net="host" \
          -v "$(pwd)/flyway/db:/flyway/db" \
          -v "$(pwd)/flyway/migrations:/flyway/sql" \
          -v "$(pwd)/flyway/config:/flyway/conf" \
          redgate/flyway migrate

  TrivyScan:
    runs-on: ubuntu-latest
    needs: ["StyleAndLintCheck", "editorconfigCheck", "MakrdownFilesCheck", "UnitTests", "HardcodedSecretsCheck"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Build Docker image
        run: docker build -t ivnmaria/modern-devops-practices:latest .

      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ivnmaria/modern-devops-practices:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  SonarCloudScan:
    runs-on: ubuntu-latest
    needs: ["DatabaseMigrationsCheck", "TrivyScan"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SonarCloud scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  SnykScan:
    runs-on: ubuntu-latest
    needs: ["DatabaseMigrationsCheck", "TrivyScan"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependecies
      run: |
        npm install -g snyk@latest
        pip install -r src/requirements.txt

    - name: Snyk scan
      run: snyk test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  BuildAndPublishDockerImage:
    runs-on: ubuntu-latest
    needs: ["SnykScan", "SonarCloudScan"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: docker build -t image:${{ github.sha }} .

      - name: Tag Docker image
        run: docker tag image:${{ github.sha }} ivnmaria/modern_devops_practices:${{ github.sha }}

      - name: Push Docker image
        run: docker push ivnmaria/modern_devops_practices:${{ github.sha }}
